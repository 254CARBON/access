## Monitoring Stack (Prometheus + Grafana)
##
## This manifest deploys Prometheus and Grafana for observability.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: 254carbon-access
  labels:
    app: prometheus
    service: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        service: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: 254carbon-access
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: 254carbon-access
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: 254carbon-access
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'gateway-service'
        static_configs:
          - targets: ['gateway-service:8000']
        metrics_path: '/metrics'
        scrape_interval: 10s

      - job_name: 'streaming-service'
        static_configs:
          - targets: ['streaming-service:8001']
        metrics_path: '/metrics'
        scrape_interval: 10s

      - job_name: 'auth-service'
        static_configs:
          - targets: ['auth-service:8010']
        metrics_path: '/metrics'
        scrape_interval: 10s

      - job_name: 'entitlements-service'
        static_configs:
          - targets: ['entitlements-service:8011']
        metrics_path: '/metrics'
        scrape_interval: 10s

      - job_name: 'metrics-service'
        static_configs:
          - targets: ['metrics-service:8012']
        metrics_path: '/metrics'
        scrape_interval: 10s

      - job_name: 'redis'
        static_configs:
          - targets: ['redis-service:6379']
        scrape_interval: 30s

      - job_name: 'postgres'
        static_configs:
          - targets: ['postgres-service:5432']
        scrape_interval: 30s

      - job_name: 'kafka'
        static_configs:
          - targets: ['kafka-service:9092']
        scrape_interval: 30s
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
  namespace: 254carbon-access
  labels:
    app: grafana
    service: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        service: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: admin-password
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: 254carbon-access
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: 254carbon-access
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: 254carbon-access
type: Opaque
data:
  admin-password: YWRtaW4xMjM= # base64 encoded "admin123"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: 254carbon-access
data:
  prometheus.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
        editable: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: 254carbon-access
data:
  dashboard.yml: |
    apiVersion: 1
    providers:
      - name: '254Carbon Access Layer'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /etc/grafana/provisioning/dashboards
