## Production Secrets Management for 254Carbon Access Layer
##
## This manifest defines secrets for production deployment.
## In production, these should be managed by external secret management systems
## like HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault.

apiVersion: v1
kind: Secret
metadata:
  name: access-secrets
  namespace: 254carbon-access
  labels:
    app: access-layer
    environment: production
type: Opaque
data:
  # Database credentials (base64 encoded)
  ACCESS_DB_PASSWORD: YWNjZXNzX3Bhc3N3b3Jk  # access_password
  ACCESS_DB_USER: YWNjZXNz  # access
  
  # Redis credentials
  ACCESS_REDIS_PASSWORD: cmVkaXNfcGFzc3dvcmQ=  # redis_password
  
  # JWT secrets
  ACCESS_JWT_SECRET_KEY: eW91cl9qd3Rfc2VjcmV0X2tleQ==  # your_jwt_secret_key
  
  # API keys
  ACCESS_API_ADMIN_KEY: YWRtaW5fa2V5  # admin_key
  ACCESS_API_SERVICE_KEY: c2VydmljZV9rZXk=  # service_key
  ACCESS_API_READONLY_KEY: cmVhZG9ubHlfa2V5  # readonly_key
  
  # Keycloak credentials
  ACCESS_KEYCLOAK_CLIENT_SECRET: a2V5Y2xvYWtfc2VjcmV0  # keycloak_secret
  ACCESS_KEYCLOAK_ADMIN_PASSWORD: YWRtaW5fcGFzc3dvcmQ=  # admin_password
  
  # Monitoring credentials
  ACCESS_GRAFANA_ADMIN_PASSWORD: Z3JhZmFuYV9wYXNzd29yZA==  # grafana_password
  
  # External service credentials
  ACCESS_EXTERNAL_API_KEY: ZXh0ZXJuYWxfYXBpX2tleQ==  # external_api_key
  
  # Encryption keys
  ACCESS_ENCRYPTION_KEY: ZW5jcnlwdGlvbl9rZXk=  # encryption_key
  ACCESS_MASTER_KEY: bWFzdGVyX2tleQ==  # master_key

---
## Service Account for Gateway Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gateway-service-account
  namespace: 254carbon-access
  labels:
    app: gateway
    service: gateway
automountServiceAccountToken: false

---
## Service Account for Streaming Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: streaming-service-account
  namespace: 254carbon-access
  labels:
    app: streaming
    service: streaming
automountServiceAccountToken: false

---
## Service Account for Auth Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: auth-service-account
  namespace: 254carbon-access
  labels:
    app: auth
    service: auth
automountServiceAccountToken: false

---
## Service Account for Entitlements Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: entitlements-service-account
  namespace: 254carbon-access
  labels:
    app: entitlements
    service: entitlements
automountServiceAccountToken: false

---
## Service Account for Metrics Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-service-account
  namespace: 254carbon-access
  labels:
    app: metrics
    service: metrics
automountServiceAccountToken: false

---
## RBAC Configuration
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: access-layer-role
  namespace: 254carbon-access
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: access-layer-rolebinding
  namespace: 254carbon-access
subjects:
- kind: ServiceAccount
  name: gateway-service-account
  namespace: 254carbon-access
- kind: ServiceAccount
  name: streaming-service-account
  namespace: 254carbon-access
- kind: ServiceAccount
  name: auth-service-account
  namespace: 254carbon-access
- kind: ServiceAccount
  name: entitlements-service-account
  namespace: 254carbon-access
- kind: ServiceAccount
  name: metrics-service-account
  namespace: 254carbon-access
roleRef:
  kind: Role
  name: access-layer-role
  apiGroup: rbac.authorization.k8s.io

---
## Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: access-layer-network-policy
  namespace: 254carbon-access
  labels:
    app: access-layer
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: gateway
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8001
    - protocol: TCP
      port: 8010
    - protocol: TCP
      port: 8011
    - protocol: TCP
      port: 8012
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: kafka
    ports:
    - protocol: TCP
      port: 9092
  - to:
    - podSelector:
        matchLabels:
          app: keycloak
    ports:
    - protocol: TCP
      port: 8080
  - to: []  # Allow DNS resolution
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
