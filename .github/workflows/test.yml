name: Test and Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.6.1"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [gateway, streaming, auth, entitlements, metrics]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
        options: >-
          --health-cmd "kafka-topics --bootstrap-server localhost:9092 --list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock

    - name: Wait for services
      run: |
        # Wait for Redis
        timeout 30 bash -c 'until redis-cli ping; do sleep 1; done'
        
        # Wait for PostgreSQL
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
        
        # Wait for Kafka
        timeout 30 bash -c 'until kafka-topics --bootstrap-server localhost:9092 --list; do sleep 1; done'

    - name: Run unit tests for ${{ matrix.service }}
      run: |
        pytest service_${{ matrix.service }}/tests/ \
          -v \
          --cov=service_${{ matrix.service }}/app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --asyncio-mode=auto

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage
        fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
        options: >-
          --health-cmd "kafka-topics --bootstrap-server localhost:9092 --list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock

    - name: Wait for services
      run: |
        # Wait for Redis
        timeout 30 bash -c 'until redis-cli ping; do sleep 1; done'
        
        # Wait for PostgreSQL
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
        
        # Wait for Kafka
        timeout 30 bash -c 'until kafka-topics --bootstrap-server localhost:9092 --list; do sleep 1; done'

    - name: Run integration tests
      run: |
        pytest tests/integration/ \
          -v \
          --asyncio-mode=auto \
          --timeout=300

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run Black formatter check
      run: |
        black --check --diff service_*/app/ tests/ shared/

    - name: Run Flake8 linter
      run: |
        flake8 service_*/app/ tests/ shared/ \
          --max-line-length=100 \
          --extend-ignore=E203,W503 \
          --per-file-ignores="__init__.py:F401"

    - name: Run MyPy type checker
      run: |
        mypy service_*/app/ shared/ \
          --ignore-missing-imports \
          --no-strict-optional \
          --warn-unused-ignores

    - name: Run Bandit security linter
      run: |
        bandit -r service_*/app/ shared/ \
          -f json \
          -o bandit-report.json \
          -ll \
          --skip B101,B601 || true

    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload safety report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-report
        path: safety-report.json

    - name: Run semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  contract-validation:
    name: Contract Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Validate service manifests
      run: |
        python scripts/validate_manifests.py

    - name: Check OpenAPI spec sync
      run: |
        python scripts/codegen_sync.py --check

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
        options: >-
          --health-cmd "kafka-topics --bootstrap-server localhost:9092 --list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install locust

    - name: Wait for services
      run: |
        # Wait for Redis
        timeout 30 bash -c 'until redis-cli ping; do sleep 1; done'
        
        # Wait for PostgreSQL
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
        
        # Wait for Kafka
        timeout 30 bash -c 'until kafka-topics --bootstrap-server localhost:9092 --list; do sleep 1; done'

    - name: Start services for performance testing
      run: |
        # Start all services in background
        cd service_gateway && python -m uvicorn app.main:app --port 8000 &
        cd service_streaming && python -m uvicorn app.main:app --port 8001 &
        cd service_auth && python -m uvicorn app.main:app --port 8010 &
        cd service_entitlements && python -m uvicorn app.main:app --port 8011 &
        cd service_metrics && python -m uvicorn app.main:app --port 8012 &
        
        # Wait for services to start
        sleep 30

    - name: Run performance tests
      run: |
        # Run basic load tests (if locust files exist)
        if [ -f "tests/performance/locustfile.py" ]; then
          locust -f tests/performance/locustfile.py \
            --headless \
            --users 100 \
            --spawn-rate 10 \
            --run-time 5m \
            --host http://localhost:8000
        else
          echo "No performance tests configured yet"
        fi

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, integration-test, lint, security, contract-validation]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.integration-test.result == 'success' && needs.lint.result == 'success' && needs.security.result == 'success' && needs.contract-validation.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"

    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.integration-test.result == 'failure' || needs.lint.result == 'failure' || needs.security.result == 'failure' || needs.contract-validation.result == 'failure' }}
      run: |
        echo "❌ Some tests failed. Check the logs for details."
        exit 1
