name: Unified CI/CD

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: access-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pipeline:
    uses: ./.github/workflows/service-ci-template.yml
    secrets: inherit
    with:
      service_slug: access
      python_version: '3.12'
      install_command: |
        python -m pip install --upgrade pip
        pip install -r access/requirements-dev.txt
      quality_matrix: ${{ toJson([
        {
          "name": "gateway",
          "source_path": "service-gateway/app",
          "tests_path": "service-gateway/tests",
          "coverage_path": "access/coverage.xml"
        },
        {
          "name": "streaming",
          "source_path": "service-streaming/app",
          "tests_path": "service-streaming/tests",
          "coverage_path": "access/coverage.xml"
        },
        {
          "name": "auth",
          "source_path": "service-auth/app",
          "tests_path": "service-auth/tests",
          "coverage_path": "access/coverage.xml"
        },
        {
          "name": "entitlements",
          "source_path": "service-entitlements/app",
          "tests_path": "service-entitlements/tests",
          "coverage_path": "access/coverage.xml"
        },
        {
          "name": "metrics",
          "source_path": "service-metrics/app",
          "tests_path": "service-metrics/tests",
          "coverage_path": "access/coverage.xml"
        }
      ]) }}
      quality_command: |
        set -euo pipefail
        cd access
        flake8 "${SERVICE_SOURCE_PATH}" --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 "${SERVICE_SOURCE_PATH}" --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        mypy "${SERVICE_SOURCE_PATH}" --ignore-missing-imports
        black --check "${SERVICE_SOURCE_PATH}"
        pytest "${SERVICE_TESTS_PATH}" -v --cov="${SERVICE_SOURCE_PATH}" --cov-report=xml
      contract_command: |
        cd access
        python scripts/validate-openapi.py
      manifest_command: |
        cd access
        python scripts/validate_manifests.py
      build_matrix: ${{ toJson([
        {
          "name": "gateway",
          "context": "access",
          "dockerfile": "access/service-gateway/Dockerfile",
          "image": "ghcr.io/254carbon/access-layer-gateway",
          "build_args": format('SERVICE_NAME=gateway\nVERSION={0}', github.sha)
        },
        {
          "name": "streaming",
          "context": "access",
          "dockerfile": "access/service-streaming/Dockerfile",
          "image": "ghcr.io/254carbon/access-layer-streaming",
          "build_args": format('SERVICE_NAME=streaming\nVERSION={0}', github.sha)
        },
        {
          "name": "auth",
          "context": "access",
          "dockerfile": "access/service-auth/Dockerfile",
          "image": "ghcr.io/254carbon/access-layer-auth",
          "build_args": format('SERVICE_NAME=auth\nVERSION={0}', github.sha)
        },
        {
          "name": "entitlements",
          "context": "access",
          "dockerfile": "access/service-entitlements/Dockerfile",
          "image": "ghcr.io/254carbon/access-layer-entitlements",
          "build_args": format('SERVICE_NAME=entitlements\nVERSION={0}', github.sha)
        },
        {
          "name": "metrics",
          "context": "access",
          "dockerfile": "access/service-metrics/Dockerfile",
          "image": "ghcr.io/254carbon/access-layer-metrics",
          "build_args": format('SERVICE_NAME=metrics\nVERSION={0}', github.sha)
        }
      ]) }}
      policy_paths: |
        access/k8s
      publish: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/')) }}
      generate_sbom: true
      sign_images: true
      run_vulnerability_scan: true
