name: Build and Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: 254carbon/access-layer

jobs:
  build:
    name: Build Multi-Arch Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [gateway, streaming, auth, entitlements, metrics]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push multi-arch image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./service_${{ matrix.service }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          SERVICE_NAME=${{ matrix.service }}
          VERSION=${{ github.sha }}

  security-scan:
    name: Security Scan Images
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write

    strategy:
      matrix:
        service: [gateway, streaming, auth, entitlements, metrics]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Run Trivy vulnerability scanner (table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
        format: 'table'
        output: 'trivy-table-${{ matrix.service }}.txt'

    - name: Upload Trivy table results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: trivy-table-${{ matrix.service }}
        path: trivy-table-${{ matrix.service }}.txt

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tags in manifests
        for service in gateway streaming auth entitlements metrics; do
          sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${service}:${{ github.sha }}|g" k8s/${service}-deployment.yaml
        done
        
        # Apply manifests
        kubectl apply -f k8s/
        
        # Wait for rollout
        kubectl rollout status deployment/gateway-deployment
        kubectl rollout status deployment/streaming-deployment
        kubectl rollout status deployment/auth-deployment
        kubectl rollout status deployment/entitlements-deployment
        kubectl rollout status deployment/metrics-deployment

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=gateway --timeout=300s
        kubectl wait --for=condition=ready pod -l app=streaming --timeout=300s
        kubectl wait --for=condition=ready pod -l app=auth --timeout=300s
        kubectl wait --for=condition=ready pod -l app=entitlements --timeout=300s
        kubectl wait --for=condition=ready pod -l app=metrics --timeout=300s
        
        # Run smoke tests
        ./scripts/smoke.sh staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tags in manifests
        for service in gateway streaming auth entitlements metrics; do
          sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${service}:${{ github.sha }}|g" k8s/${service}-deployment.yaml
        done
        
        # Apply manifests
        kubectl apply -f k8s/
        
        # Wait for rollout
        kubectl rollout status deployment/gateway-deployment
        kubectl rollout status deployment/streaming-deployment
        kubectl rollout status deployment/auth-deployment
        kubectl rollout status deployment/entitlements-deployment
        kubectl rollout status deployment/metrics-deployment

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=gateway --timeout=300s
        kubectl wait --for=condition=ready pod -l app=streaming --timeout=300s
        kubectl wait --for=condition=ready pod -l app=auth --timeout=300s
        kubectl wait --for=condition=ready pod -l app=entitlements --timeout=300s
        kubectl wait --for=condition=ready pod -l app=metrics --timeout=300s
        
        # Run smoke tests
        ./scripts/smoke.sh production

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes
          - Updated all services to version ${{ github.sha }}
          - Deployed to production environment
          
          ## Services
          - Gateway Service
          - Streaming Service  
          - Auth Service
          - Entitlements Service
          - Metrics Service
        draft: false
        prerelease: false

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify staging deployment
      if: needs.deploy-staging.result == 'success'
      run: |
        echo "✅ Staging deployment successful!"

    - name: Notify production deployment
      if: needs.deploy-production.result == 'success'
      run: |
        echo "✅ Production deployment successful!"

    - name: Notify deployment failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Deployment failed. Check the logs for details."
        exit 1
