name: Release and Version Management

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create prerelease'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: 254carbon/access-layer

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Get current version from git tags
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${CURRENT_VERSION#v}
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment based on version type
          case "${{ github.event.inputs.version_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        else
          # Use tag from push event
          NEW_VERSION="${{ github.ref_name }}"
        fi
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $NEW_VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        # Get previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          # Generate changelog from commits since previous tag
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          # First release
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
        fi
        
        # Limit changelog length
        CHANGELOG=$(echo "$CHANGELOG" | head -50)
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Git tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "${{ steps.version.outputs.version }}" -m "Release ${{ steps.version.outputs.version }}"
        git push origin "${{ steps.version.outputs.version }}"

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ## Services Updated
          - Gateway Service
          - Streaming Service
          - Auth Service
          - Entitlements Service
          - Metrics Service
          
          ## Docker Images
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gateway:${{ steps.version.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-streaming:${{ steps.version.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-auth:${{ steps.version.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-entitlements:${{ steps.version.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-metrics:${{ steps.version.outputs.version }}`
        draft: false
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [gateway, streaming, auth, entitlements, metrics]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push multi-arch image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./service_${{ matrix.service }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          SERVICE_NAME=${{ matrix.service }}
          VERSION=${{ needs.create-release.outputs.version }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [create-release, build-and-push]
    permissions:
      contents: read
      packages: read
      security-events: write

    strategy:
      matrix:
        service: [gateway, streaming, auth, entitlements, metrics]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ needs.create-release.outputs.version }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Run Trivy vulnerability scanner (table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ needs.create-release.outputs.version }}
        format: 'table'
        output: 'trivy-table-${{ matrix.service }}.txt'

    - name: Upload Trivy table results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: trivy-table-${{ matrix.service }}
        path: trivy-table-${{ matrix.service }}.txt

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-and-push, security-scan]
    environment: production
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tags in manifests
        for service in gateway streaming auth entitlements metrics; do
          sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${service}:${{ needs.create-release.outputs.version }}|g" k8s/${service}-deployment.yaml
        done
        
        # Apply manifests
        kubectl apply -f k8s/
        
        # Wait for rollout
        kubectl rollout status deployment/gateway-deployment
        kubectl rollout status deployment/streaming-deployment
        kubectl rollout status deployment/auth-deployment
        kubectl rollout status deployment/entitlements-deployment
        kubectl rollout status deployment/metrics-deployment

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=gateway --timeout=300s
        kubectl wait --for=condition=ready pod -l app=streaming --timeout=300s
        kubectl wait --for=condition=ready pod -l app=auth --timeout=300s
        kubectl wait --for=condition=ready pod -l app=entitlements --timeout=300s
        kubectl wait --for=condition=ready pod -l app=metrics --timeout=300s
        
        # Run smoke tests
        ./scripts/smoke.sh production

    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Production deployment successful!"
        echo "Version: ${{ needs.create-release.outputs.version }}"
        echo "Services deployed:"
        echo "  - Gateway Service"
        echo "  - Streaming Service"
        echo "  - Auth Service"
        echo "  - Entitlements Service"
        echo "  - Metrics Service"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Production deployment failed!"
        echo "Version: ${{ needs.create-release.outputs.version }}"
        exit 1
