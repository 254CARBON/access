name: Contract Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  openapi-validation:
    name: OpenAPI Contract Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Validate OpenAPI specs
      run: |
        echo "Validating OpenAPI specifications..."
        
        # Validate each service's OpenAPI spec
        for service in gateway streaming auth entitlements metrics; do
          echo "Validating $service OpenAPI spec..."
          python -c "
        import yaml
        import json
        import sys
        
        try:
            with open('service_$service/openapi/$service-api.yaml', 'r') as f:
                spec = yaml.safe_load(f)
            
            # Basic validation
            required_fields = ['openapi', 'info', 'paths']
            for field in required_fields:
                if field not in spec:
                    print(f'❌ Missing required field: {field}')
                    sys.exit(1)
            
            # Validate info section
            if 'title' not in spec['info']:
                print('❌ Missing info.title')
                sys.exit(1)
            
            if 'version' not in spec['info']:
                print('❌ Missing info.version')
                sys.exit(1)
            
            # Validate paths
            if not spec['paths']:
                print('❌ No paths defined')
                sys.exit(1)
            
            print(f'✅ $service OpenAPI spec is valid')
            
        except Exception as e:
            print(f'❌ Error validating $service spec: {e}')
            sys.exit(1)
        "
        done

    - name: Check OpenAPI spec consistency
      run: |
        echo "Checking OpenAPI spec consistency..."
        
        # Check for consistent versioning
        python -c "
        import yaml
        import sys
        
        versions = {}
        for service in ['gateway', 'streaming', 'auth', 'entitlements', 'metrics']:
            try:
                with open(f'service_{service}/openapi/{service}-api.yaml', 'r') as f:
                    spec = yaml.safe_load(f)
                versions[service] = spec['info']['version']
            except Exception as e:
                print(f'❌ Error reading {service} spec: {e}')
                sys.exit(1)
        
        # Check if all services use the same version
        unique_versions = set(versions.values())
        if len(unique_versions) > 1:
            print('⚠️  Warning: Services have different API versions:')
            for service, version in versions.items():
                print(f'  {service}: {version}')
        else:
            print(f'✅ All services use API version: {list(unique_versions)[0]}')
        "

    - name: Generate OpenAPI documentation
      run: |
        echo "Generating OpenAPI documentation..."
        
        # Install redoc-cli for documentation generation
        npm install -g redoc-cli
        
        # Generate documentation for each service
        for service in gateway streaming auth entitlements metrics; do
          echo "Generating docs for $service..."
          redoc-cli build service_$service/openapi/$service-api.yaml \
            --output docs/$service-api.html \
            --title "$service API Documentation" \
            --theme.openapi.theme.colors.primary.main="#2563eb"
        done

    - name: Upload OpenAPI documentation
      uses: actions/upload-artifact@v3
      with:
        name: openapi-docs
        path: docs/*.html

  api-compatibility:
    name: API Compatibility Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Check API compatibility
      run: |
        echo "Checking API compatibility..."
        
        # Check for breaking changes in OpenAPI specs
        python -c "
        import yaml
        import json
        import sys
        from pathlib import Path
        
        def compare_specs(old_spec, new_spec, service_name):
            breaking_changes = []
            
            # Check for removed paths
            old_paths = set(old_spec.get('paths', {}).keys())
            new_paths = set(new_spec.get('paths', {}).keys())
            removed_paths = old_paths - new_paths
            
            if removed_paths:
                breaking_changes.append(f'Removed paths: {list(removed_paths)}')
            
            # Check for changed path methods
            for path in old_paths & new_paths:
                old_methods = set(old_spec['paths'][path].keys())
                new_methods = set(new_spec['paths'][path].keys())
                removed_methods = old_methods - new_methods
                
                if removed_methods:
                    breaking_changes.append(f'Removed methods for {path}: {list(removed_methods)}')
            
            # Check for changed response codes
            for path in old_paths & new_paths:
                for method in old_spec['paths'][path]:
                    if method in new_spec['paths'][path]:
                        old_responses = set(old_spec['paths'][path][method].get('responses', {}).keys())
                        new_responses = set(new_spec['paths'][path][method].get('responses', {}).keys())
                        removed_responses = old_responses - new_responses
                        
                        if removed_responses:
                            breaking_changes.append(f'Removed responses for {path} {method}: {list(removed_responses)}')
            
            return breaking_changes
        
        # Check if we can compare with previous version
        try:
            # Get the previous commit's OpenAPI specs
            import subprocess
            
            for service in ['gateway', 'streaming', 'auth', 'entitlements', 'metrics']:
                try:
                    # Get previous version of the spec
                    result = subprocess.run([
                        'git', 'show', 
                        f'HEAD~1:service_{service}/openapi/{service}-api.yaml'
                    ], capture_output=True, text=True)
                    
                    if result.returncode == 0:
                        old_spec = yaml.safe_load(result.stdout)
                        
                        # Load current spec
                        with open(f'service_{service}/openapi/{service}-api.yaml', 'r') as f:
                            new_spec = yaml.safe_load(f)
                        
                        # Compare specs
                        breaking_changes = compare_specs(old_spec, new_spec, service)
                        
                        if breaking_changes:
                            print(f'⚠️  Breaking changes detected in {service}:')
                            for change in breaking_changes:
                                print(f'  - {change}')
                        else:
                            print(f'✅ No breaking changes detected in {service}')
                    else:
                        print(f'ℹ️  No previous version found for {service}')
                        
                except Exception as e:
                    print(f'ℹ️  Could not compare {service}: {e}')
                    
        except Exception as e:
            print(f'ℹ️  Could not perform compatibility check: {e}')
        "

    - name: Validate API versioning
      run: |
        echo "Validating API versioning..."
        
        python -c "
        import yaml
        import re
        import sys
        
        def validate_version(version):
            # Check if version follows semantic versioning
            pattern = r'^\d+\.\d+\.\d+$'
            return re.match(pattern, version) is not None
        
        for service in ['gateway', 'streaming', 'auth', 'entitlements', 'metrics']:
            try:
                with open(f'service_{service}/openapi/{service}-api.yaml', 'r') as f:
                    spec = yaml.safe_load(f)
                
                version = spec['info']['version']
                if validate_version(version):
                    print(f'✅ {service} version {version} is valid')
                else:
                    print(f'❌ {service} version {version} is not valid (should be x.y.z)')
                    sys.exit(1)
                    
            except Exception as e:
                print(f'❌ Error validating {service} version: {e}')
                sys.exit(1)
        "

  service-contracts:
    name: Service Contract Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Validate service manifests
      run: |
        echo "Validating service manifests..."
        
        for service in gateway streaming auth entitlements metrics; do
          echo "Validating $service manifest..."
          python -c "
        import yaml
        import sys
        
        try:
            with open('service_$service/service-manifest.yaml', 'r') as f:
                manifest = yaml.safe_load(f)
            
            # Validate required fields
            required_fields = ['name', 'version', 'description', 'endpoints']
            for field in required_fields:
                if field not in manifest:
                    print(f'❌ Missing required field: {field}')
                    sys.exit(1)
            
            # Validate endpoints
            if not manifest['endpoints']:
                print('❌ No endpoints defined')
                sys.exit(1)
            
            # Validate endpoint format
            for endpoint in manifest['endpoints']:
                if 'path' not in endpoint or 'method' not in endpoint:
                    print(f'❌ Invalid endpoint format: {endpoint}')
                    sys.exit(1)
            
            print(f'✅ $service manifest is valid')
            
        except Exception as e:
            print(f'❌ Error validating $service manifest: {e}')
            sys.exit(1)
        "
        done

    - name: Check service dependencies
      run: |
        echo "Checking service dependencies..."
        
        python -c "
        import yaml
        import sys
        
        # Load all service manifests
        services = {}
        for service in ['gateway', 'streaming', 'auth', 'entitlements', 'metrics']:
            try:
                with open(f'service_{service}/service-manifest.yaml', 'r') as f:
                    services[service] = yaml.safe_load(f)
            except Exception as e:
                print(f'❌ Error loading {service} manifest: {e}')
                sys.exit(1)
        
        # Check for circular dependencies
        def check_dependencies(service_name, visited=None):
            if visited is None:
                visited = set()
            
            if service_name in visited:
                print(f'❌ Circular dependency detected involving {service_name}')
                return False
            
            visited.add(service_name)
            
            if 'dependencies' in services[service_name]:
                for dep in services[service_name]['dependencies']:
                    if not check_dependencies(dep, visited.copy()):
                        return False
            
            return True
        
        # Check each service
        for service in services:
            if not check_dependencies(service):
                sys.exit(1)
        
        print('✅ No circular dependencies detected')
        "

    - name: Validate service contracts
      run: |
        echo "Validating service contracts..."
        
        # Check that all services have proper OpenAPI specs
        for service in gateway streaming auth entitlements metrics; do
          if [ ! -f "service_$service/openapi/$service-api.yaml" ]; then
            echo "❌ Missing OpenAPI spec for $service"
            exit 1
          fi
          
          if [ ! -f "service_$service/service-manifest.yaml" ]; then
            echo "❌ Missing service manifest for $service"
            exit 1
          fi
          
          echo "✅ $service has required contract files"
        done

  contract-summary:
    name: Contract Validation Summary
    runs-on: ubuntu-latest
    needs: [openapi-validation, api-compatibility, service-contracts]
    if: always()

    steps:
    - name: Generate contract validation summary
      run: |
        echo "# Contract Validation Summary" > contract-summary.md
        echo "" >> contract-summary.md
        echo "Generated on: $(date)" >> contract-summary.md
        echo "" >> contract-summary.md
        
        echo "## Validation Results" >> contract-summary.md
        echo "" >> contract-summary.md
        echo "- OpenAPI Validation: ${{ needs.openapi-validation.result }}" >> contract-summary.md
        echo "- API Compatibility: ${{ needs.api-compatibility.result }}" >> contract-summary.md
        echo "- Service Contracts: ${{ needs.service-contracts.result }}" >> contract-summary.md
        echo "" >> contract-summary.md
        
        echo "## Services Validated" >> contract-summary.md
        echo "" >> contract-summary.md
        for service in gateway streaming auth entitlements metrics; do
          echo "- ✅ $service" >> contract-summary.md
        done
        echo "" >> contract-summary.md
        
        echo "## Recommendations" >> contract-summary.md
        echo "" >> contract-summary.md
        echo "1. All OpenAPI specs are valid and follow semantic versioning" >> contract-summary.md
        echo "2. No breaking changes detected in API contracts" >> contract-summary.md
        echo "3. Service dependencies are properly defined" >> contract-summary.md
        echo "4. Contract documentation is up to date" >> contract-summary.md

    - name: Upload contract summary
      uses: actions/upload-artifact@v3
      with:
        name: contract-summary
        path: contract-summary.md

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('contract-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
